apply plugin: 'com.android.application'

def versionMajor = "0.9.7"
def versionSuffix = "pre"

static def getDate() {
    return new Date().format('yyyyMMdd_HHmmss')
}

afterEvaluate {


    task provideDebugApkOnSshServer(type: JavaExec, dependsOn: assembleDebug) {
        group = "Execution"
        description = "Run the main class with JavaExecTask"
        classpath += files(getBuildDir().toString() + "/intermediates/javac/debug/classes/")
        classpath += files(getProjectDir().toString() +"/libs/jsch-0.1.55.jar")
        getMainClass().set("mg.mgmap.generic.util.SshBuild")
        args = [ files("$projectDir/../.ssh/config.properties").first(), "apk" , ".*\\.apk(\\.sha256)?", files("$buildDir/outputs/apk/debug/*.apk").first(), files("$buildDir/outputs/apk/debug/*.sha256").first()]

    }

    task generateDebugSHA(type: JavaExec, dependsOn: assembleDebug) {
        group = "Execution"
        description = "Run the main class with JavaExecTask"
        classpath += files(getBuildDir().toString() + "/intermediates/javac/debug/classes/")
        getMainClass().set("mg.mgmap.generic.util.SHA256")
        args files("${buildDir}/outputs/apk/debug")
    }
    task generateReleaseSHA(type: JavaExec, dependsOn: assembleRelease) {
        group = "Execution"
        description = "Run the main class with JavaExecTask"
        classpath += files(getBuildDir().toString() + "/intermediates/javac/debug/classes/")
        getMainClass().set("mg.mgmap.generic.util.SHA256")
        args files("${buildDir}/outputs/apk/release")
    }


//     task mylist ()  {
//         assembleRelease.dependsOn( mylist )
//         assembleDebug.dependsOn( mylist )
//         System.out.println("mylist is executed")
//         PrintWriter out = new PrintWriter( new File("${rootDir}/mgmap/src/main/assets/testcases.list"))
//         def files =  fileTree("${rootDir}").matching {include "**/src/main/java/**/test/tc*/**"}.files
//         for (File file : files){
//             out.println(file.absolutePath
//                     .replaceAll("\\\\", "/")
//                     .replaceFirst(".*github/MGMapViewer/mgmap/src/main/java/","")
//                     .replaceFirst("\\.java","")
//                     .replaceAll("/", "\\."))
//         }
//         out.close()
//    }
    task myclean {
        assembleRelease.dependsOn( myclean )
        assembleDebug.dependsOn( myclean )
        delete "${buildDir}/outputs/apk"
    }
    task copyReleaseApk(type: Copy, dependsOn: generateReleaseSHA) {
        from("$buildDir/outputs/apk/release") {
            include '**/*.apk'
            include '**/*.apk.sha256'
            exclude '**/*unsigned.apk', '**/*unaligned.apk'
        }
        into '../apk/release'
    }
    task copyDebugApk(type: Copy, dependsOn: generateDebugSHA) {
        from("$buildDir/outputs/apk/debug") {
            include '**/*.apk'
            include '**/*.apk.sha256'
            exclude '**/*unsigned.apk', '**/*unaligned.apk'
        }
        into '../apk/debug'
    }
    task zipReleaseApk(type: Zip, dependsOn: copyReleaseApk ){
        from("$buildDir/outputs/apk/release") {
            exclude '**/*unsigned.apk', '**/*unaligned.apk'
        }
        archiveName( "apk.zip" )
        destinationDirectory = file( "../apk/release")
    }
    task zipDebugApk(type: Zip, dependsOn: copyDebugApk ){
        from("$buildDir/outputs/apk/debug") {
            exclude '**/*unsigned.apk', '**/*unaligned.apk'
        }
        archiveName( "apk.zip" )
        destinationDirectory = file( "../apk/debug")
    }

    task _mgmapPublish (dependsOn: ['zipReleaseApk','zipDebugApk', 'downloadMD']){
        doLast {
            System.out.println( "_mgmapPublish finished" )
        }
    }

    task _mgmapDebugApk (dependsOn: ['generateDebugSHA']){
        if (new File("./.ssh").exists()){
            dependsOn(provideDebugApkOnSshServer)
        }
        doLast {
            System.out.println( "_mgmapDebugApk finished" )
        }
    }

    task downloadMD(){
        doFirst { // this prevents running during configuration phase
            System.out.println("regenerate Download.md")
            PrintWriter out = new PrintWriter( new File("${rootDir}/docs/download.md"))
            out.println("<small><small>[Back to Index](./index.md)</small></small>\n")
            out.println("## Debug apk")
            out.println("Download latest debug [apk](https://github.com/mg4gh/MGMapViewer/blob/master/apk/debug/MGMapViewer-debug-"+project.android.defaultConfig.versionName+".apk?raw=true)")
            out.println()
            out.println("## Release apk")
            out.println("Download latest release [apk](https://github.com/mg4gh/MGMapViewer/blob/master/apk/release/MGMapViewer-release-"+project.android.defaultConfig.versionName+".apk?raw=true)")
            out.println()
            out.println("<small><small>[Back to Index](./index.md)</small></small>\n")
            out.close()
        }
    }

}

android {
    compileSdkVersion 33
    defaultConfig {
        applicationId "mg.mgmap"
        minSdkVersion 26
        targetSdkVersion 33
        versionCode 1
        versionName "${versionMajor}-${versionSuffix}-${getDate()}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.9
        targetCompatibility = 1.9
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES']
        }
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${parent.name}-${output.baseName}-${variant.versionName}.apk"

        }

     }

    sourceSets {
        main {
//            manifest.srcFile 'AndroidManifest.xml'
//            java.srcDirs = ['src/main/java']
//            resources.srcDirs = ['src']
//            res.srcDirs = ['res']
//            assets.srcDirs = ['assets']
            file("${rootDir}/sqlite-android/natives").eachDir() { dir ->
                jniLibs.srcDirs += "${dir.path}/lib"
            }
        }
    }

    signingConfigs {
        release {
            keyAlias 'mgm'
            storeFile file('../mgm.jks')
            File propsFile = file('../secure.properties')
            if (propsFile.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream(propsFile))
                storePassword props.getProperty('storePassword')
                keyPassword props.getProperty('keyPassword')
            }

            // Optional, specify signing versions used
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }


}

// workaround (to prevent duplicate class error) after update to
// 'androidx.appcompat:appcompat:1.5.0'
// which is in conflict with 'androidx.preference:preference:1.2.0'
configurations {
    all {
        exclude group: 'androidx.lifecycle', module: 'lifecycle-viewmodel-ktx'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.preference:preference:1.2.0'
    api 'net.sf.kxml:kxml2:2.3.0'

    implementation 'com.android.support:preference-v7:33.0.0'
    implementation files('libs/commons-net-3.8.0.jar')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
    implementation files('libs/javax.json-1.1.2.jar')
    implementation files('libs/javax.json-api-1.1.2.jar')

    implementation 'net.lingala.zip4j:zip4j:2.11.1'
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"

    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
//    implementation 'com.jcraft:jsch:0.1.55'

    implementation 'com.google.android.gms:play-services-location:21.0.1'

    implementation 'org.mapsforge:mapsforge-map-android:0.18.0'
    implementation 'org.mapsforge:mapsforge-themes:0.18.0'
    implementation 'org.mapsforge:sqlite-android:0.18.0'
    implementation 'com.caverock:androidsvg:1.4'

    implementation 'androidx.work:work-runtime:2.7.1'
}
