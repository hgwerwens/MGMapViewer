apply plugin: 'com.android.application'

String aBuildDate = new Date().format('yyyyMMdd_HHmmss')
System.out.println("***************************************************************************************************")
System.out.println("*************************************** ${aBuildDate} *******************************************")
System.out.println("***************************************************************************************************")


// This code is running during gradle config phase - read mgBuildNbr and mgVersionCode from current ./mgmap/version.properties file
// Increase values depending on the start parameter (task "_mgmapPublish" is called - or not), but don't write the back to the properties file yet.
// Saving of these increased values happens only at the end in the "_mgmapPublish" and the "_mgmapDebugApk" task - so effectively only these two task increase these counters

def versionMajor = "0.9.8"
String outputFileNameBundle
String parentProjectDir = new File("${projectDir}").getParent()

File versionPropsFile = file('version.properties')
int mgBuildNbr = 1
int mgVersionCode = 1

Properties versionProps = new Properties()
try (FileInputStream fis = new FileInputStream(versionPropsFile)){
    versionProps.load(fis)
} catch (Exception e){ System.out.println(e.getMessage()) }
mgBuildNbr = Integer.parseInt( versionProps.getOrDefault('BUILD_NBR', "1") )
mgVersionCode = Integer.parseInt( versionProps.getOrDefault('VERSION_CODE', "1") )
System.out.println("Old: buildNbr="+mgBuildNbr+" mgVersionCode="+mgVersionCode)
if (gradle.properties.get("startParameter").toString().contains("taskRequests=[DefaultTaskExecutionRequest{args=[_mgmapPublish],")) {
    mgVersionCode++
    mgBuildNbr = 0 // reset build number when version code is incremented
} else {
    mgBuildNbr++
}
System.out.println("New: buildNbr="+mgBuildNbr+" mgVersionCode="+mgVersionCode)
versionProps.put('VERSION_CODE',Integer.toString(mgVersionCode))
versionProps.put('BUILD_NBR',Integer.toString(mgBuildNbr))


// Here are some method definitions

static void saveVersion(Properties properties, File toFile){
    try (FileOutputStream fos = new FileOutputStream("${toFile}")) {
        properties.store(fos, " Automatically updated File - do not edit manually")
        System.out.println("new version data saved.")
    } catch (Exception e){ System.out.println(e.getMessage()) }
}

// Here follow the relevant task definitions

afterEvaluate {

    tasks.register('provideDebugApkOnSshServer', JavaExec) {
        dependsOn assembleDebug
        group = "Execution"
        description = "Run the main class with JavaExecTask"
        classpath += files(getBuildDir().toString() + "/intermediates/javac/mg4ghDebug/classes/")
        classpath += files(getProjectDir().toString() + "/libs/jsch-0.1.55.jar")
        getMainClass().set("mg.mgmap.generic.util.SshBuild")
        args = [files("$projectDir/../.ssh/config.properties").first(), "apk", ".*\\.apk(\\.sha256)?", files("$buildDir/outputs/apk/mg4gh/debug/*.apk").first(), files("$buildDir/outputs/apk/mg4gh/debug/*.sha256").first()]

    }

    tasks.register('myclean') {
        assembleRelease.dependsOn(myclean)
        assembleDebug.dependsOn(myclean)
        delete "${buildDir}/outputs/apk"
        delete "${buildDir}/outputs/bundle"
    }

    android.productFlavors.configureEach { flavor ->
        android.buildTypes.configureEach { buildType ->
            def buildTypeCap = ("${buildType.name}").capitalize()
            def buildVariant = "${flavor.name}${buildTypeCap}"

            tasks.register("${buildVariant}GenerateSHA", JavaExec) {
                dependsOn "assemble${buildTypeCap}"
                group = "Execution"
                description = "Run the main class with JavaExecTask"
                classpath += files(getBuildDir().toString() + "/intermediates/javac/${buildVariant}/classes/")
                getMainClass().set("mg.mgmap.generic.util.SHA256")
                args files("${buildDir}/outputs/apk/${flavor.name}/${buildType.name}")
            }

            tasks.register("${buildVariant}CopyApk", Copy) {
                dependsOn "${buildVariant}GenerateSHA"
                from("$buildDir/outputs/apk/${flavor.name}/${buildType.name}") {
                    include '**/*.apk'
                    include '**/*.apk.sha256'
                    exclude '**/*unsigned.apk', '**/*unaligned.apk'
                }
                into "${parentProjectDir}/apk/${buildType.name}"
            }

            tasks.register("${buildVariant}ZipApk",Zip) {
                dependsOn "${buildVariant}CopyApk"
                from("$buildDir/outputs/apk/${flavor.name}/${buildType.name}") {
                    exclude '**/*unsigned.apk', '**/*unaligned.apk'
                }
                destinationDirectory = file( "${parentProjectDir}/apk/${buildType.name}")
                doLast {
                    ant.move(file: "${parentProjectDir}/apk/${buildType.name}/mgmap.zip", toFile: "${parentProjectDir}/apk/${buildType.name}/apk.zip")
                }
            }
        }
    }


    tasks.register('soft4mgReleaseCopyAab', Copy) {
        dependsOn "bundleSoft4mgRelease"
//        This version of calculation for outputFileNameBundle caused a lot of warnings, therefore replaced by current method via outputFileNameBundle variable
//        def versionName = android.applicationVariants.collect {x -> x.properties.versionName}.findAll {y->y.contains("soft4mg-release")}.first()
//        def outputFileNameBundle = "${parent.name}-${versionName}.aab"
        System.out.println("outputFileNameBundle=" + outputFileNameBundle)
        from("$buildDir/outputs/bundle/soft4mgRelease/mgmap-soft4mg-release.aab")
        into "${parentProjectDir}/aab"
        rename("mgmap-soft4mg-release.aab", "${outputFileNameBundle}")
    }

    tasks.register('_mgmapPublish') {
        dependsOn(['mg4ghDebugZipApk', 'mg4ghReleaseZipApk', 'downloadMD', 'soft4mgReleaseCopyAab'])
        doLast {
            saveVersion(versionProps, versionPropsFile)
            System.out.println("_mgmapPublish finished")
        }
    }

    tasks.register('_mgmapDebugApk') {
        dependsOn 'mg4ghDebugGenerateSHA'
        if (new File("./.ssh").exists()) {
            dependsOn(provideDebugApkOnSshServer)
        }
        doLast {
            saveVersion(versionProps, versionPropsFile)
            System.out.println("_mgmapDebugApk finished")
        }
    }

    tasks.register('downloadMD'){
        doFirst { // this prevents running during configuration phase
            System.out.println("regenerate Download.md")
            PrintWriter out = new PrintWriter( new File("${rootDir}/docs/download.md"))
            out.println("<small><small>[Back to Index](./index.md)</small></small>\n")
            out.println("## Debug apk")
            out.println("Download latest debug [apk](https://github.com/mg4gh/MGMapViewer/blob/master/apk/debug/MGMapViewer-"+project.android.defaultConfig.versionName+"-mg4gh-debug.apk?raw=true)")
            out.println()
            out.println("## Release apk")
            out.println("Download latest release [apk](https://github.com/mg4gh/MGMapViewer/blob/master/apk/release/MGMapViewer-"+project.android.defaultConfig.versionName+"-mg4gh-release.apk?raw=true)")
            out.println()
            out.println("<small><small>[Back to Index](./index.md)</small></small>\n")
            out.close()
        }
    }

}

android {
    compileSdk 34
    defaultConfig {
        def mgBuildTime = "\"${aBuildDate}\""
        applicationId "mg.mgmap"
        minSdkVersion 26
        targetSdkVersion 34
        versionCode Integer.parseInt("$mgVersionCode")
        versionName "${versionMajor}-${mgVersionCode}.${mgBuildNbr}"
        buildConfigField "String", "BUILD_TIME", "${mgBuildTime}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".rel"
            versionNameSuffix "-release"
        }
        debug {
            applicationIdSuffix ""
            versionNameSuffix "-debug"
        }
    }
    flavorDimensions += "githubUser"
    productFlavors{
        mg4gh {
            dimension "githubUser"
            applicationId "mg.mgmap"
            versionNameSuffix '-mg4gh'
        }
        soft4mg {
            dimension "githubUser"
            applicationId "de.soft4mg.mgmap"
            versionNameSuffix '-soft4mg'
        }
    }

    compileOptions {
        sourceCompatibility = 1.9
        targetCompatibility = 1.9
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES']
        }
    }
    android.applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            outputFileName = "${parent.name}-${variant.versionName}.apk"
            if ("${variant.versionName}".contains("release")){
                outputFileNameBundle = "${parent.name}-${variant.versionName}.aab"
            }
        }
    }

    sourceSets {
        main {
            file("${rootDir}/sqlite-android/natives").eachDir() { dir ->
                jniLibs.srcDirs += "${dir.path}/lib"
            }
        }
    }

    signingConfigs {
        mg4gh {
            keyAlias 'mgm'
            storeFile file('../mgm.jks')
            File propsFile = file('../secure.properties')
            if (propsFile.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream(propsFile))
                storePassword props.getProperty('storePassword')
                keyPassword props.getProperty('keyPassword')
            }
            // Optional, specify signing versions used
            v1SigningEnabled true
            v2SigningEnabled true
        }
        soft4mg {
            keyAlias 'soft4mg'
            storeFile file('../../../soft4mg/soft4mg.jks')
            File propsFile = file('../../../soft4mg/secure.properties')
            if (propsFile.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream(propsFile))
                storePassword props.getProperty('storePassword')
                keyPassword props.getProperty('keyPassword')
            } else {
                System.out.println("Failed to read secure props")
            }
            // Optional, specify signing versions used
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            productFlavors.mg4gh.signingConfig signingConfigs.mg4gh
            productFlavors.soft4mg.signingConfig signingConfigs.soft4mg
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
    namespace 'mg.mgmap'
}

// workaround (to prevent duplicate class error) after update to
// 'androidx.appcompat:appcompat:1.5.0'
// which is in conflict with 'androidx.preference:preference:1.2.0'
// 20231017: workaround seems no longer necessary
//configurations {
//    all {
//        exclude group: 'androidx.lifecycle', module: 'lifecycle-viewmodel-ktx'
//    }
//}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.preference:preference:1.2.1'
    api 'net.sf.kxml:kxml2:2.3.0'

    implementation files('libs/commons-net-3.8.0.jar')
    implementation files('libs/javax.json-1.1.2.jar')
    implementation files('libs/javax.json-api-1.1.2.jar')

    implementation 'net.lingala.zip4j:zip4j:2.11.5'
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"

    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
//    implementation 'com.jcraft:jsch:0.1.55' // copied to libs folder of project -> access during project build

    implementation 'com.google.android.gms:play-services-location:21.2.0'

    implementation 'org.mapsforge:mapsforge-map-android:0.21.0'
    implementation 'org.mapsforge:mapsforge-themes:0.21.0'
    implementation 'org.mapsforge:sqlite-android:0.19.0'
    implementation 'com.caverock:androidsvg:1.4'

//    implementation 'androidx.work:work-runtime:2.8.0'

//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation "androidx.test:core:1.5.0"


    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.5.1"
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'

//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'
//    androidTestImplementation "com.squareup.leakcanary:leakcanary-android-instrumentation:2.10"
}
