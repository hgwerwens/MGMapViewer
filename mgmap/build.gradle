apply plugin: 'com.android.application'

def versionMajor = "0.9.7"
def versionMajorSuffix = "pre"

String outputFileNameBundle

static def getDate() {
    return new Date().format('yyyyMMdd_HHmmss')
}

afterEvaluate {


    task provideDebugApkOnSshServer(type: JavaExec, dependsOn: assembleDebug) {
        group = "Execution"
        description = "Run the main class with JavaExecTask"
        classpath += files(getBuildDir().toString() + "/intermediates/javac/mg4ghDebug/classes/")
        classpath += files(getProjectDir().toString() +"/libs/jsch-0.1.55.jar")
        getMainClass().set("mg.mgmap.generic.util.SshBuild")
        args = [ files("$projectDir/../.ssh/config.properties").first(), "apk" , ".*\\.apk(\\.sha256)?", files("$buildDir/outputs/apk/mg4gh/debug/*.apk").first(), files("$buildDir/outputs/apk/mg4gh/debug/*.sha256").first()]

    }

    task myclean {
        assembleRelease.dependsOn( myclean )
        assembleDebug.dependsOn( myclean )
        delete "${buildDir}/outputs/apk"
        delete "${buildDir}/outputs/bundle"
    }

    android.productFlavors.all { flavor ->
        android.buildTypes.all { buildType ->
            def buildTypeCap = ("${buildType.name}").capitalize()
            def buildVariant = "${flavor.name}${buildTypeCap}"

            task "${buildVariant}GenerateSHA"(type: JavaExec, dependsOn: "assemble${buildTypeCap}") {
                group = "Execution"
                description = "Run the main class with JavaExecTask"
                classpath += files(getBuildDir().toString() + "/intermediates/javac/${flavor.name}Debug/classes/")
                getMainClass().set("mg.mgmap.generic.util.SHA256")
                args files("${buildDir}/outputs/apk/${flavor.name}/${buildType.name}")
            }

            task "${buildVariant}CopyApk"(type: Copy, dependsOn: "${buildVariant}GenerateSHA") {
                from("$buildDir/outputs/apk/${flavor.name}/${buildType.name}") {
                    include '**/*.apk'
                    include '**/*.apk.sha256'
                    exclude '**/*unsigned.apk', '**/*unaligned.apk'
                }
                into "../apk/${buildType.name}"
            }

            task "${buildVariant}ZipApk"(type: Zip, dependsOn: "${buildVariant}CopyApk" ){
                from("$buildDir/outputs/apk/${flavor.name}/${buildType.name}") {
                    exclude '**/*unsigned.apk', '**/*unaligned.apk'
                }
                archiveName( "apk.zip" )
                destinationDirectory = file( "../apk/${buildType.name}")
            }
        }
    }


    task soft4mgReleaseCopyAab(type: Copy, dependsOn: "bundleSoft4mgRelease") {
//        This version of calculation for outputFileNameBundle caused a lot of warnings, therefore replaced by current method via outputFileNameBundle variable
//        def versionName = android.applicationVariants.collect {x -> x.properties.versionName}.findAll {y->y.contains("soft4mg-release")}.first()
//        def outputFileNameBundle = "${parent.name}-${versionName}.aab"
        System.out.println("outputFileNameBundle="+outputFileNameBundle)
        from("$buildDir/outputs/bundle/soft4mgRelease/mgmap-soft4mg-release.aab")
        into "../aab/"
        rename ("mgmap-soft4mg-release.aab", "${outputFileNameBundle}")
    }

    task _mgmapPublish (dependsOn: ['mg4ghDebugZipApk','mg4ghReleaseZipApk', 'downloadMD', 'soft4mgReleaseCopyAab']){
        doLast {
            System.out.println( "_mgmapPublish finished" )
        }
    }

    task _mgmapDebugApk (dependsOn: ['mg4ghDebugGenerateSHA']){
        if (new File("./.ssh").exists()){
            dependsOn(provideDebugApkOnSshServer)
        }
        doLast {
            System.out.println( "_mgmapDebugApk finished" )
        }
    }

    task downloadMD(){
        doFirst { // this prevents running during configuration phase
            System.out.println("regenerate Download.md")
            PrintWriter out = new PrintWriter( new File("${rootDir}/docs/download.md"))
            out.println("<small><small>[Back to Index](./index.md)</small></small>\n")
            out.println("## Debug apk")
            out.println("Download latest debug [apk](https://github.com/mg4gh/MGMapViewer/blob/master/apk/debug/MGMapViewer-debug-"+project.android.defaultConfig.versionName+".apk?raw=true)")
            out.println()
            out.println("## Release apk")
            out.println("Download latest release [apk](https://github.com/mg4gh/MGMapViewer/blob/master/apk/release/MGMapViewer-release-"+project.android.defaultConfig.versionName+".apk?raw=true)")
            out.println()
            out.println("<small><small>[Back to Index](./index.md)</small></small>\n")
            out.close()
        }
    }

}

android {
    compileSdkVersion 33
    defaultConfig {
        applicationId "mg.mgmap"
        minSdkVersion 26
        targetSdkVersion 33
        versionCode 1
        versionName "${versionMajor}-${versionMajorSuffix}-${getDate()}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".rel"
            versionNameSuffix "-release"
        }
        debug {
            applicationIdSuffix ""
            versionNameSuffix "-debug"
        }
    }
    flavorDimensions "githubUser"
    productFlavors{
        mg4gh {
            dimension "githubUser"
            applicationId "mg.mgmap"
            versionNameSuffix '-mg4gh'
        }
        soft4mg {
            dimension "githubUser"
            applicationId "de.soft4mg.mgmap"
            versionNameSuffix '-soft4mg'
        }
    }

    compileOptions {
        sourceCompatibility = 1.9
        targetCompatibility = 1.9
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES']
        }
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${parent.name}-${variant.versionName}.apk"
            if ("${variant.versionName}".contains("release")){
                outputFileNameBundle = "${parent.name}-${variant.versionName}.aab"
            }
        }
    }

    sourceSets {
        main {
//            manifest.srcFile 'AndroidManifest.xml'
//            java.srcDirs = ['src/main/java']
//            resources.srcDirs = ['src']
//            res.srcDirs = ['res']
//            assets.srcDirs = ['assets']
            file("${rootDir}/sqlite-android/natives").eachDir() { dir ->
                jniLibs.srcDirs += "${dir.path}/lib"
            }
        }
    }

    signingConfigs {
        mg4gh {
            keyAlias 'mgm'
            storeFile file('../mgm.jks')
            File propsFile = file('../secure.properties')
            if (propsFile.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream(propsFile))
                storePassword props.getProperty('storePassword')
                keyPassword props.getProperty('keyPassword')
            }
            // Optional, specify signing versions used
            v1SigningEnabled true
            v2SigningEnabled true
        }
        soft4mg {
            keyAlias 'soft4mg'
            storeFile file('../../../soft4mg/soft4mg.jks')
            File propsFile = file('../../../soft4mg/secure.properties')
            if (propsFile.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream(propsFile))
                storePassword props.getProperty('storePassword')
                keyPassword props.getProperty('keyPassword')
            } else {
                System.out.println("Failed to read secure props")
            }
            // Optional, specify signing versions used
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            productFlavors.mg4gh.signingConfig signingConfigs.mg4gh
            productFlavors.soft4mg.signingConfig signingConfigs.soft4mg
        }
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            testLogging {
                exceptionFormat "full"
                events "started", "skipped", "passed", "failed"
                showStandardStreams true
            }
        }
    }
}

// workaround (to prevent duplicate class error) after update to
// 'androidx.appcompat:appcompat:1.5.0'
// which is in conflict with 'androidx.preference:preference:1.2.0'
configurations {
    all {
        exclude group: 'androidx.lifecycle', module: 'lifecycle-viewmodel-ktx'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.preference:preference:1.2.0'
    api 'net.sf.kxml:kxml2:2.3.0'

    implementation 'com.android.support:preference-v7:33.0.0'
    implementation files('libs/commons-net-3.8.0.jar')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation files('libs/javax.json-1.1.2.jar')
    implementation files('libs/javax.json-api-1.1.2.jar')

    implementation 'net.lingala.zip4j:zip4j:2.11.1'
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"

    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
//    implementation 'com.jcraft:jsch:0.1.55' // copied to libs folder of project -> access during project build

    implementation 'com.google.android.gms:play-services-location:21.0.1'

    implementation 'org.mapsforge:mapsforge-map-android:0.18.0'
    implementation 'org.mapsforge:mapsforge-themes:0.18.0'
    implementation 'org.mapsforge:sqlite-android:0.18.0'
    implementation 'com.caverock:androidsvg:1.4'

    implementation 'androidx.work:work-runtime:2.7.1'
}
